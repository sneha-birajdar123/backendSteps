// Backend crash codes :

I . setup (folder structure setup)
//////////////

1. create a new repo in github with your project name
make sure u check README.md and also add keywords and description
public or private its on your

2. get on terminal
3. cd 
4. git clone YOUR-REPO-URL
5. cd RepoName
6. mkdir client server
7. cd server
8. npm init -y
npm i express config mongoose jsonwebtoken bcrypt axios
9. mkdir controllers models utils config
10. cd config
touch default.json
Add this code in default.json
...

{
    "port": 5000,
    "DB_URL" : "ur connection url"
}
........

11. cd ..
12. touch app.js .gitignore
add this code in .gitignore
...

node_modules
config

....

13. open your package.jaon and add

"type" : "module"

and in scripts add 

"start" : "nodemon app.js"


if nodemon not found then 

sudo npm install -g nodemon
or 
npm install -g nodemon

14. now come back to your app.js


//////////////////

II - express and DB setup

1. make sure ur config has DB_URL with  a new DB_NAME
like this
...
{
    "port": 5000,
    "DB_URL" : "ur url"
}

....

2. come back to main folder level
3. cd utils
4. touch dbConnect.js

Add this below in file
.....
import mongoose from "mongoose"
import config from "config"

async function dbConnect(){
    try{
        let dbUrl = config.get({"DB_URL"})
        await mongoose.connect(dbUrl)
    }catch(error){
        console.log(error)
    }
}
dbConnect()
.......

5. now come back to app.js
Add this code
/////////////////////

import express from "express"
import config from "config"

import "./utils.dbConnect.js"

const app = express()
const port = config.get("port")
app.use(express.json())

//make a get simple hello world server api

app.get("/", (req, res) => {
    try{
    res.status(200).json({msg: "Hello World"})
    }catch(error){
        console.log(error)
    }
})
app.listen(port, () => {
    console.log(`server is up and running at ${port}`)
})
////////////////////////////////////////

6. now run the server 
npm start

// make sure u server
server is up and running and database connected successfully.




III - express routing setup

1. make sure u have controllers folder

2. cd controllers
// create ur subfolders according to your project
ex: users, admin , staff 

3. mkdir users staff admin
4. cd users && touch index.js && cd ..
5. cd staff && touch index.js && cd ..
6. cd admin && touch index.js && cd ..

7. in users folder in index.js 
add this code below 
........

import express from "express"

const router = express.Router()

router.get("/getallusers", (req, res) => {
    try{
        console.log("Get all users")
        res.status(200).json({msg: "get all users"})
    }catch(error){
        console.log(error)
        res.status(500).json({msg: error})
    }
})

router.post("/register", (req, res ) => {
    try{
        let userData = req.body
        console.log(userData)
        res.status(200).json(userData)
    }catch(error){
        console.log(error)
    }
})

export default router




IV - model mongoose setup 

1. make sure u have models folder
2. cd models
// create your sub folders according to your project
Users, Admins, Staff

3. mkdir Users Staff Admins
4. cd Users && Users.js && cd .. 
5. cd Staff && Staff.js && cd .. 
6. cd Admin && Admin.js && cd .. 

/////////////////////////////


V - Routing import export
1. make sure controllers/users/index.js
has 
const router = express.Router()

and 

export default router

2. now come back to your app.js
Add this below code
............

import express from "express"
import config from "config"

import "./utils/dbConnect.js";
------------------------------------------------
import routing here: 
import userRouter from "./controllers/users/index.js"
import adminRouter from "./controllers/admin/index.js"
import staffRouter from "./controllers/staff/index.js"


const app = express()
const port = config.get("port")
app.use(express.json())

//make a get simple hello world server api

app.get("/", (req, res) => {
    try{
    res.status(200).json({msg: "Hello World"})
    }catch(error){
        console.log(error)
    }
app.use("/api/user", userRouter)
app.use("/api/admin". adminRouter)
app.use("/api/staff", staffRouter)

})
app.listen(port, () => {
    console.log(`server is up and running at ${port}`)
})




VI - mongoose  model setup

1. make sure u have models folder
and with sub folders
ex: Admin Users Staff
2. Then each folder should have same filename with there foldername
ex: Admin/Admin.js

In Users.js 
Add this code below
.....

import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
    firstname: {
        type: String,
        required: true
    },
    lastname: {
        type: String,
        required: true
    },
    email: {
    type:String,
    required: true,
    unique: true
    },
    age: {
        type: number,
        required: true
    }
})
// it acceps 3 params 

mongoose.model("customerName", userVariableName, "collectionName)
const userModel = mongoose.model("Users", userSchema, "users")
export default userModel

...................


VII - Connecting model in API's & testing in Postman

1. make sure you have model schema setup and export of model
ex: export default userModel

2. now come back to controllers folder in users in index.js
3. controllers/users/index.js
add this code below

.............

import express from "express";
import userModel from "../../models/Users/Users.js"
const router = express.Router()

//Get all API

/*
API METHOD: Get
ROUTE: /getall
API NAME: Get all users
*/

router.get("/getall",async (req, res) => {
    try{
        let allUsers = await userModel.find({})
        res.status(200).json(allUsers)
    }catch(error){
        console.log(error)
        res.status(500).json({msg: error})
    }
})


API METHOD: Get one
ROUTE: /get
API NAME: Get one


*/

router.get("/get",async (req, res) => {
    try{
        let user = await userModel.find({firstname: "Sneha})
        res.status(200).json(user)
    }catch(error){
        console.log(error)
        res.status(500).json({msg: error})
    }
})

*/

/*
API METHOD: POST
ROUTE: /add
API NAME: adding users

router.post("/add", async(req, res) => {
    try{
let userData = req.body
console.log(userData)
await userModel.create(userData)
res.send(201).json({msg: "User added successfully})
    }catch(error){
        console.log(error)
        res.status(500).json({msg: error})
    }
})

*/

/*
API METHOD: PUT
ROUTE: /update/:email (req.params.email)
ROUTE: /update (this is for req.body)
API NAME: update users

router.put("update/:email", (req, res)=>{
    try{
        let userEmail = req.params.email
         let userEmail = req.body
         console.log(userEmail)

         await userModel.findOneAndUpdate(
            {email: userEmail, {$set:userData},{new: true} })

            res.status(200).json({msg: "User Updated successfully"})

    }catch(error){
        console.log(error)
        res.status(500).json({msg: error})
    }
})
*/

/*
API METHOD: DELETE
ROUTE: /delete/:email
API NAME: delete users


router.delete("/delete/:email", async(req, res)=>{
    try{
      let userEmail = req.params.email
      console.log(userEmail)
      await userModel.deleteOne({msg: "User deleted successfully})
    }catch(error){
        console.log(error)
        res.status(500).json({msg: error})
    }
})
*/


/*
API METHOD: DELETE
ROUTE: /deleteall
API NAME: delete all users

this api will delete all user collection

router.delete("/deleteall", async(req, res)=>{
    try{
        await userModel.deleteMany({}) //if you pass like this it will delete all api's
        (or)
        await userModel.deleteMany({firstname: "Sneha}) // it will delete only first name
        res.status(200).json({msg: "All users deleted successfully"})
    }catch(error){
        console.log(error)
        res.status(500).json({msg: error})
    }
})
export default router
*/
......................